using System.Collections.Generic;

namespace Rxns.DDD.BoundedContext
{
    /// <summary>
    /// Represents an aggregate root event sourced data model
    /// </summary>
    public interface IAggRoot
    {
        /// <summary>
        /// The unique id of the aggregate
        /// </summary>
        string EId { get; set; }
        /// <summary>
        /// The unique id of the aggregate
        /// </summary>
        string Tenant { get; set; }
        /// <summary>
        /// Gets any events that have been generated by the aggregate from commands that have been executed against it
        /// </summary>
        /// <returns></returns>
        IEnumerable<IDomainEvent> GetUncommittedChanges();
        /// <summary>
        /// Re-hydrates an aggregate from its historical events
        /// </summary>
        /// <param name="history"></param>
        void LoadFromHistory(IEnumerable<IDomainEvent> history);
        /// <summary>
        /// Tells the aggregate that a series of events has been persisted to a reliable data store for later retreival,
        /// meaning it no longer needs to maintain them its in history
        /// </summary>
        /// <param name="changes"></param>
        void MarkChangesAsCommitted(params IDomainEvent[] changes);
        /// <summary>
        /// The version of the aggregate. This is not used yet but in the future it can be used to verify consistancy of 
        /// the aggregte before performing operations against it that require this 
        /// </summary>
        int Version { get; set; }

        void ApplyChange(dynamic @event);
    }
}
